# Smoke test: Successful lookup request
# Expected: 200 OK with JSON response containing all 4 filter sections (oil, air, cabin, fuel)
# Even if some sections are empty arrays, all 4 keys must be present

POST http://localhost:8080/api/lookup
Content-Type: application/json

{
  "make": "Peugeot",
  "model": "208",
  "year": 2019,
  "hints": {
    "fuel": "nafta",
    "ac": true,
    "displacement_l": 1.6
  },
  "lang": "es-AR"
}

###

# Alternative test with minimal payload
POST http://localhost:8080/api/lookup
Content-Type: application/json

{
  "make": "Peugeot",
  "model": "208",
  "year": 2019
}

###

# Test case for stepwise disambiguation (should ask only one question at a time)
POST http://localhost:8080/api/lookup
Content-Type: application/json

{
  "make": "Peugeot",
  "model": "208",
  "year": 2019
}

###

# Test case for smart disambiguation - displacement_l should NOT be asked if it doesn't affect results
POST http://localhost:8080/api/lookup
Content-Type: application/json

{
  "make": "Peugeot",
  "model": "208",
  "year": 2019,
  "hints": {
    "fuel": "nafta"
  }
}

###

# Test case for engine series disambiguation
# Expected: Should ask about engine_series if multiple variants exist
POST http://localhost:8080/api/lookup
Content-Type: application/json

{
  "make": "Peugeot",
  "model": "208",
  "year": 2019,
  "hints": {
    "fuel": "nafta",
    "ac": true,
    "displacement_l": 1.6
  }
}

###

# Test case with engine_series hint provided
# Expected: Should NOT ask about engine_series if hint is provided
POST http://localhost:8080/api/lookup
Content-Type: application/json

{
  "make": "Peugeot",
  "model": "208",
  "year": 2019,
  "hints": {
    "fuel": "nafta",
    "ac": true,
    "displacement_l": 1.6,
    "engine_series": "TBI 16V"
  }
}

###